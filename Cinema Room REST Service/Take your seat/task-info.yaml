type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
        private Long row;
        private Long column;

        private Seat(Long row, Long column) {
            this.row = row;
            this.column = column;
        }
        Seat() {

        }

        public Long getRow() {
            return row;
        }

        public void setRow(Long row) {
            this.row = row;
        }

        public Long getColumn() {
            return column;
        }

        public void setColumn(Long column) {
            this.column = column;
        }

        @Override
        public String toString() {
            return "{" +
                    "row=" + row +
                    ", column=" + column +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/ResponseDto.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonGetter;

    import java.util.List;

    public class ResponseDto {
        private Long totalRows;
        private Long totalColumns;
        private List<Seat> availableSeats;

        public ResponseDto(Long totalRows, Long totalColumns, List<Seat> availableSeats) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = availableSeats;
        }

        public ResponseDto() {

        }

        @JsonGetter(value = "total_rows")
        public Long getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(Long totalRows) {
            this.totalRows = totalRows;
        }

        @JsonGetter(value = "total_columns")
        public Long getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(Long totalColumns) {
            this.totalColumns = totalColumns;
        }

        @JsonGetter(value = "available_seats")
        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }

        @Override
        public String toString() {
            return "{" +
                    "total_rows=" + totalRows +
                    ", total_columns=" + totalColumns +
                    ", available_seats=" + availableSeats +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import java.util.List;

    public class Cinema {
        private Long totalRows;
        private Long totalColumns;
        private List<Seat> availableSeats;

        public Cinema(Long totalRows, Long totalColumns, List<Seat> availableSeats) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableSeats = availableSeats;
        }

        public Cinema() {

        }

        public Long getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(Long totalRows) {
            this.totalRows = totalRows;
        }

        public Long getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(Long totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getSeatList() {
            return availableSeats;
        }

        public void setSeatList(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }

        @Override
        public String toString() {
            return "Cinema{" +
                    "total_rows=" + totalRows +
                    ", total_columns=" + totalColumns +
                    ", available_seats=" + availableSeats +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.ArrayList;
    import java.util.List;

    @RestController
    @RequestMapping
    public class CinemaController {



        @GetMapping("/seats")
        public ResponseEntity<?> getInfo() throws Exception {
            int[][] cinemaSeats = new int[9][9];
            Seat seat;
            Cinema cinema = new Cinema();
            cinema.setTotalRows(9L);
            cinema.setTotalColumns(9L);
            List<Seat> seats = new ArrayList<>();

            int[][] dimArr = new int[9][9];

            int num = 1;
            for (int i = 0; i < dimArr.length; i++) {
                for (int j = 0; j < dimArr[i].length; j++) {
                    dimArr[i][j] = num++;
                }
                num = 1;
            }

            for (int i = 0; i < dimArr.length; i++) {
                for (int j = 0; j < dimArr[i].length; j++) {
                    seat = new Seat();
                    //System.out.println("row:" + num);
                    seat.setRow((long) num);
                    //  System.out.println("column:" + dimArr[i][j]);
                    seat.setColumn((long) dimArr[i][j]);
                    seats.add(seat);

                }
                num++;
            }
            cinema.setSeatList(seats);
           // System.out.println(cinema);
            ResponseDto responseDto = new ResponseDto();
            responseDto.setTotalColumns(9L);
            responseDto.setTotalRows(9L);
            responseDto.setAvailableSeats(seats);

            return new ResponseEntity<>(responseDto, HttpStatus.OK);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Unchecked
record: -1
