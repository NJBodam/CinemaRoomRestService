type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import java.util.UUID;

    public class Seat {

        private String token;
        private Ticket ticket;

        public Seat(String token, Ticket ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public Seat() {

        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Ticket getTicket() {
            return ticket;
        }

        public void setTicket(Ticket ticket) {
            this.ticket = ticket;
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "token='" + token + '\'' +
                    ", ticket=" + ticket +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/ErrorDto.java
  visible: true
  text: |
    package cinema;

    public class ErrorDto {
        private String error;

        public ErrorDto(String error) {
            this.error = error;
        }

        public ErrorDto() {
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }


        @Override
        public String toString() {
            return "ErrorDto{" +
                    "error='" + error + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    public class Ticket {
        private Long row;
        private Long column;
        private Long price;

        private Ticket(Long row, Long column, Long price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }
        Ticket() {

        }

        public Long getPrice() {
            return price;
        }

        public void setPrice(Long price) {
            this.price = price;
        }

        public Long getRow() {
            return row;
        }

        public void setRow(Long row) {
            this.row = row;
        }

        public Long getColumn() {
            return column;
        }

        public void setColumn(Long column) {
            this.column = column;
        }

        @Override
        public String toString() {
            return "Seat{" +
                    "row=" + row +
                    ", column=" + column +
                    ", price=" + price +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/Cinema.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonGetter;

    import java.util.List;

    public class Cinema {
        private Long totalRows;
        private Long totalColumns;
        private List<Ticket> availableTickets;

        public Cinema(Long totalRows, Long totalColumns, List<Ticket> availableTickets) {
            this.totalRows = totalRows;
            this.totalColumns = totalColumns;
            this.availableTickets = availableTickets;
        }

        public Cinema() {

        }

        @JsonGetter(value = "total_rows")
        public Long getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(Long totalRows) {
            this.totalRows = totalRows;
        }

        @JsonGetter(value = "total_columns")
        public Long getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(Long totalColumns) {
            this.totalColumns = totalColumns;
        }

        @JsonGetter(value = "available_seats")
        public List<Ticket> getAvailableTickets() {
            return availableTickets;
        }

        public void setAvailableTickets(List<Ticket> availableTickets) {
            this.availableTickets = availableTickets;
        }

        @Override
        public String toString() {
            return "{" +
                    "total_rows=" + totalRows +
                    ", total_columns=" + totalColumns +
                    ", available_tickets=" + availableTickets +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/TicketRequestDto.java
  visible: true
  text: |
    package cinema;

    public class TicketRequestDto {
        private Long row;
        private Long column;

        public TicketRequestDto(Long row, Long column) {
            this.row = row;
            this.column = column;
        }

        public TicketRequestDto() {
        }

        public Long getRow() {
            return row;
        }

        public void setRow(Long row) {
            this.row = row;
        }

        public Long getColumn() {
            return column;
        }

        public void setColumn(Long column) {
            this.column = column;
        }

        @Override
        public String toString() {
            return "TicketRequestDto{" +
                    "row=" + row +
                    ", column=" + column +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/CinemaController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Optional;
    import java.util.UUID;

    @RestController
    @RequestMapping
    public class CinemaController {

        private static Cinema cinemaRoom;
        private static final List<Seat> soldSeats = new ArrayList<>();
        private static final List<Seat> availableSeats = new ArrayList<>();

        private static final String ERR_ALREADY_PURCHASED = "The ticket has been already purchased!";
        private static final String ERR_OUT_OF_BOUNDS = "The number of a row or a column is out of bounds!";
        private static final String ERR_WRONG_TOKEN = "Wrong token!";

        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseTicket(@RequestBody TicketRequestDto ticketRequestDto) {
            if (ticketRequestDto.getRow()  > 9
                    || ticketRequestDto.getColumn() > 9
                    || ticketRequestDto.getRow() < 1
                    || ticketRequestDto.getColumn() < 1) {
                return getErrorDtoResponseEntity(ERR_OUT_OF_BOUNDS);
            }

            Seat seat = availableSeats.get(ticketIdentifier(ticketRequestDto.getRow(), ticketRequestDto.getColumn()));
            if (soldSeats.contains(seat)) {
                return getErrorDtoResponseEntity(ERR_ALREADY_PURCHASED);
            }
            soldSeats.add(seat);
            return new ResponseEntity<>(seat, HttpStatus.OK);
        }

        private int ticketIdentifier(long row, long column) {
            return row > 1 ? Math.toIntExact((row - 1) * 9 + column - 1) : Math.toIntExact(row * column - 1);
        }

        private ResponseEntity<?> getErrorDtoResponseEntity(String s) {
            ErrorDto errorDto = new ErrorDto();
            errorDto.setError(s);
            return new ResponseEntity<>(errorDto, HttpStatus.BAD_REQUEST);
        }

        @PostMapping("/return")
        public ResponseEntity<?> returnTicket(@RequestBody ReturnTicketRequestDto returnTicketReq) {
            Optional<Seat> optionalSeat = soldSeats.stream().filter(x -> x.getToken().equals(returnTicketReq.getToken())).findFirst();
            ReturnedTicket rt = new ReturnedTicket();
            if(optionalSeat.isEmpty()) {
                return getErrorDtoResponseEntity(ERR_WRONG_TOKEN);
            }
            rt.setReturnedTicket(optionalSeat.orElseThrow().getTicket());
            return new ResponseEntity<>(rt, HttpStatus.OK);
        }

        @GetMapping("/seats")
        public ResponseEntity<?> getInfo() throws Exception {
            Ticket ticket;
            List<Ticket> tickets = new ArrayList<>();
            Seat seat;

            try {
                if (cinemaRoom == null) {
                    int[][] cinemaSeats = new int[9][9];

                    int num = 1;
                    for (int i = 0; i < cinemaSeats.length; i++) {
                        for (int j = 0; j < cinemaSeats[i].length; j++) {
                            cinemaSeats[i][j] = num++;
                        }
                        num = 1;
                    }

                    for (int i = 0; i < cinemaSeats.length; i++) {
                        for (int j = 0; j < cinemaSeats[i].length; j++) {
                            ticket = new Ticket();
                            ticket.setRow((long) num);
                            if (num <= 4) {
                                ticket.setPrice(10L);
                            } else {
                                ticket.setPrice(8L);
                            }
                            ticket.setColumn((long) cinemaSeats[i][j]);
                            tickets.add(ticket);
                            seat = new Seat();
                            seat.setTicket(ticket);
                            seat.setToken(UUID.randomUUID().toString());
                            availableSeats.add(seat);
                        }
                        num++;
                    }
                    Cinema cinema = new Cinema();
                    cinema.setTotalColumns(9L);
                    cinema.setTotalRows(9L);
                    cinema.setAvailableTickets(tickets);
                    cinemaRoom = cinema;
                }

            } catch (NullPointerException e) {
                System.err.println(e.getClass().getSimpleName());
            }
            return new ResponseEntity<>(cinemaRoom, HttpStatus.OK);
        }
    }
  learner_created: true
- name: src/cinema/ReturnedTicket.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonGetter;

    public class ReturnedTicket {
        private Ticket returnedTicket;

        public ReturnedTicket(Ticket returnedTicket) {
            this.returnedTicket = returnedTicket;
        }

        public ReturnedTicket() {
        }

        @JsonGetter(value = "returned_ticket")
        public Ticket getReturnedTicket() {
            return returnedTicket;
        }

        public void setReturnedTicket(Ticket returnedTicket) {
            this.returnedTicket = returnedTicket;
        }

        @Override
        public String toString() {
            return "ReturnedTicket{" +
                    "returnedTicket=" + returnedTicket +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/ReturnTicketRequestDto.java
  visible: true
  text: |
    package cinema;

    public class ReturnTicketRequestDto {
        private String token;

        public ReturnTicketRequestDto(String token) {
            this.token = token;
        }

        public ReturnTicketRequestDto() {
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        @Override
        public String toString() {
            return "ReturnTicketRequestDto{" +
                    "token='" + token + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/cinema/Statistics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 16 Apr 2022 02:33:06 UTC
record: -1
